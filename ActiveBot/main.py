from aiohttp import web
from aiogram import Bot, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.webhook import SendMessage, get_new_configured_app
import aiogram.utils.markdown as fmt
import urllib

import asyncio

from random import randint
from os import getenv
from sys import exit
from aiogram import types

import enum

class workStatus(enum.Enum):
    clean = 0
    latex = 1
    wiki = 2

workFlag = workStatus.clean

import os, requests
import aiohttp

async def getPngLatex( formula, file, negate=False ):
    tfile = file
    if negate:
        tfile = 'tmp.png'
    r = requests.get('http://latex.codecogs.com/png.latex?\dpi{300} \huge %s' % formula)
    f = open( tfile, 'wb' )
    f.write( r.content )
    f.close()
    if negate:
        os.system( 'convert tmp.png -channel RGB -negate -colorspace rgb %s' %file )

def getSvgLatex(formula, file):
    url = "https://math.vercel.app?from=%s" % formula
    req = requests.get(url)
    f = open(file, 'wb')
    f.write(req.content)
    f.close()

async def getPNG(msg: str):
    raw_str = r'{}'.format(msg)
    try:
        await getPngLatex(raw_str, 'reg_levin.png', True )
    except aiohttp.client_exceptions.ClientOSError as ex:
        pass

async def getSVG(msg: str):
    raw_str = r'{}'.format(msg)
    try:
        getSvgLatex(raw_str, 'tmp.svg')
    except Exception as ex:
        print(ex)

import wikipedia

async def getWikiPage(msg: str):
    try:
        pageUrl = wikipedia.page(msg).url
    except wikipedia.DisambiguationError as e:
        s = e.options[0]
        pageUrl = wikipedia.page(s).url
    except wikipedia.exceptions.PageError:
        pageUrl = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ...'
    return pageUrl

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="6272715291:AAHfBPOaMvYZGCyGC92qLOq9iuObR96lPo8", parse_mode=types.ParseMode.HTML)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)

usersStatus = dict()

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
# 0 -- –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
# 1 -- –ª–∞—Ç–µ—Ö
# 2 -- —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã

@dp.message_handler(commands="info")
async def cmd_info(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.clean

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons1 = ["–ü–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ LaTeX –≤ PNG", "–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –≤ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–π –≤–∏–∫–∏–ø–µ–¥–∏–∏"]
    buttons2 = ["–®–∞–±–ª–æ–Ω—ã", "–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä"]
    buttons3 = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "FAQ"]
    keyboard.add(*buttons1)
    keyboard.add(*buttons2)
    keyboard.add(*buttons3)
    await message.answer(
        fmt.text(
            fmt.text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ."),
            fmt.text("–£ –º–µ–Ω—è –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:"),
            fmt.text("LaTeX -- –Ω–∞–ø–∏—à–∏ /LaTeX, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–¥ —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ —è–∑—ã–∫–µ —Ä–∞–∑–º–µ—Ç–∫–∏ LaTeX. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ñ–æ—Ä–º—É–ª–æ–π."),
            fmt.text("–ü–æ–∏—Å–∫ –ø–æ –≤–∏–∫–∏–ø–µ–¥–∏–∏ -- –Ω–∞–ø–∏—à–∏ /wiki, –ø–æ—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏. –ë–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø—Ä–æ—Å."),
            fmt.text("–®–∞–±–ª–æ–Ω—ã -- –Ω–∞–ø–∏—à–∏ /template, –ø–æ—Å–ª–µ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω."),
            fmt.text("–¢–∞–∫–∂–µ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:"),
            fmt.text("–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä -- –Ω–∞–ø–∏—à–∏ /clean, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."),
            fmt.text("–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ -- –Ω–∞–ø–∏—à–∏ /info."),
            fmt.text("–£–∑–Ω–∞—Ç—å –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã -- –Ω–∞–ø–∏—à–∏ /faq"),
            fmt.text("–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫ -- /dice."),
            sep="\n"
                ), parse_mode="HTML", reply_markup=keyboard
    )

@dp.message_handler(commands="start")
async def cmd_hello(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.clean
    await message.reply(
        fmt.text(
            fmt.text("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–∑ –®–∫–æ–ª—ã", fmt.hunderline("–ê–∫—Ç–∏–≤–∞"), "–ù–ò–Ø–£ –ú–ò–§–ò!"),
            sep="\n"
                ), parse_mode="HTML"
    )
    await cmd_info(message)

#-----------------------------------------------------------------------#

@dp.message_handler(lambda message: message.text == "/LaTeX" or message.text == "–ü–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ LaTeX –≤ PNG")
async def LaTeX_button(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.latex
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ LaTeX.")

@dp.message_handler(lambda message: message.text == "/wiki" or message.text == "–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –≤ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–π –≤–∏–∫–∏–ø–µ–¥–∏–∏")
async def wiki_button(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.wiki
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏.")

@dp.message_handler(lambda message: message.text == "/clean" or message.text == "–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä")
async def clear_button(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.clean
    await message.reply("–í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω.")

@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def clear_button(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.clean
    await cmd_info(message)

#-----------------------------------------------------------------------#
@dp.message_handler(lambda message: message.text == "FAQ" or message.text == "/faq")
async def cmd_fuck(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.clean
    await message.answer(
        fmt.text(
            fmt.text("–ï—Å–ª–∏ —É –í–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:"),
            fmt.text("Telegramm: @snomephi"),
            fmt.text("Email: sno@mephi.ru"),
            fmt.text("Web: sno.mephi.ru"),
            sep="\n"
        ))
    
@dp.message_handler(lambda message: message.text == "–®–∞–±–ª–æ–Ω—ã" or message.text == "/templates")
async def cmd_inline_url(message: types.Message):
    global usersStatus
    usersStatus[message.from_id] = workStatus.clean
    buttons = [
        types.InlineKeyboardButton(text="–í–ö–†", callback_data = "VKR"),
        types.InlineKeyboardButton(text="–î–Ω–µ–≤–Ω–∏–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫", callback_data = "Dnev"),
        types.InlineKeyboardButton(text="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", callback_data = "Prez"),
        types.InlineKeyboardButton(text="–õ–æ–≥–æ—Ç–∏–ø—ã –ú–ò–§–ò –∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤", callback_data = "Logo"),
        types.InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã", callback_data = "Liter")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)

@dp.callback_query_handler(text="Dnev")
async def cmd_dnev(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–ú–∞–≥–∏—Å—Ç—Ä", callback_data = "Mag"),
        types.InlineKeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä", callback_data = "Bag"),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)

@dp.callback_query_handler(text="Mag")
async def cmd_mag(call: types.CallbackQuery):
    await call.message.answer("–î–Ω–µ–≤–Ω–∏–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è –º–∞–≥–∏—Å—Ç—Ä–æ–≤")
    msgs = await call.message.answer_media_group(mag)
    for msg in msgs:
        pass
        #await bot.send_message(664519103, f'FILE_ID: {msg.document.file_id}')

@dp.callback_query_handler(text="Bag")
async def cmd_bac(call: types.CallbackQuery):
    await call.message.answer("–î–Ω–µ–≤–Ω–∏–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è –±–∞–∫–∞–ª–∞–≤—Ä–æ–≤")
    msgs = await call.message.answer_media_group(bag)
    for msg in msgs:
        pass
        #await bot.send_message(664519103, f'FILE_ID: {msg.document.file_id}')

@dp.callback_query_handler(text="VKR")
async def cmd_vkr(call: types.CallbackQuery):
    await call.message.answer("–®–∞–±–ª–æ–Ω—ã –í–ö–†")
    msgs = await call.message.answer_media_group(vkr)
    for msg in msgs:
        pass
        #await bot.send_message(664519103, f'FILE_ID: {msg.document.file_id}')

@dp.callback_query_handler(text="Prez")
async def cmd_prez(call: types.CallbackQuery):
    await call.message.answer("–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π")
    msg = await call.message.answer_media_group(prez)
    #await bot.send_message(664519103, f'FILE_ID: {msg[0].document.file_id}')

@dp.callback_query_handler(text="Logo")
async def cmd_logo(call: types.CallbackQuery):
    await call.message.answer("–õ–æ–≥–æ—Ç–∏–ø—ã –ú–ò–§–ò –∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤")
    msgs = await call.message.answer_media_group(logo)
    for msg in msgs:
        pass
        #await bot.send_message(664519103, f'FILE_ID: {msg.document.file_id}')

@dp.callback_query_handler(text="Liter")
async def cmd_litres(call: types.CallbackQuery):
    await call.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")
    msg = await call.message.answer_media_group(liter)
    #await bot.send_message(664519103, f'FILE_ID: {msg[0].document.file_id}')

@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

#-----------------------------------------------------------------------#

vkr = types.MediaGroup()
vkr.attach_document("BQACAgIAAxkDAAIF_mRaswstVvUnAVEFUOyFAoEjZs4LAALUMAACU5bZSlYwIiGUV5pELwQ", "")
vkr.attach_document("BQACAgIAAxkDAAIF_2RaswsHNl5iianGF8whI6gozPp5AALVMAACU5bZSob0ic1yIhvyLwQ", "")


mag = types.MediaGroup()
mag.attach_document("BQACAgIAAxkDAAIGCWRasxa9iLuVZEZ7CjllO27X8PEHAALXMAACU5bZSmtNBWmfsoDRLwQ", "")
mag.attach_document("BQACAgIAAxkDAAIGCmRasxY2EY0Xf4D9Px-x6b3gOoojAALYMAACU5bZSsTVdEYOJmeKLwQ", "")
mag.attach_document("BQACAgIAAxkDAAIGC2RasxbdGorLkro0BZ781Bry6OWEAALWMAACU5bZSlEIGlXlG_0DLwQ", "")

bag = types.MediaGroup()
bag.attach_document("BQACAgIAAxkDAAIGEGRasxn7Dd0I7aS_MTNDbn3g136KAALaMAACU5bZSktZkoubYdZ6LwQ", "")
bag.attach_document("BQACAgIAAxkDAAIGEWRasxlJxdea2EfvHuyNhDUN0c2SAALZMAACU5bZSmFNr9Yldu8mLwQ", "")


prez = types.MediaGroup()
prez.attach_document("BQACAgIAAxkDAAIGGWRasyCJ3t-8K0Ey2rmNAbJ4FFL1AALbMAACU5bZSme5fDnvVdjfLwQ", "")

logo = types.MediaGroup()
logo.attach_document("BQACAgIAAxkDAAIGHGRasyRru5xN4qVN5_gvyhjA5mCqAALcMAACU5bZSmkkdU3u7K2RLwQ", "")
logo.attach_document("BQACAgIAAxkDAAIGHWRasySLQ62b9nvrbx4qp2Qv5X7YAALdMAACU5bZSsmCJi36Di2BLwQ", "")

liter = types.MediaGroup()
liter.attach_document("BQACAgIAAxkDAAIGYmRatFfpGoqb2kqEno2PS18YQYZwAALhMAACU5bZSp0dRRkR07ZyLwQ", "")

#-----------------------------------------------------------------------#

@dp.message_handler()
async def any_text_message2(message: types.Message):
    global usersStatus
    if (usersStatus[message.from_id] == workStatus.clean):
      pass
    elif (usersStatus[message.from_id] == workStatus.latex):
        await getPNG(message.text)
        await getSVG(message.text)
        await message.answer_document(types.InputFile('tmp.png', '–§–æ—Ä–º—É–ª–∞.png'), caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        await message.answer_document(types.InputFile('tmp.svg', '–§–æ—Ä–º—É–ª–∞.svg'))
    elif (usersStatus[message.from_id] == workStatus.wiki):
        url = await getWikiPage(message.text)
        await message.answer(url)
    else:
        await message.answer("Undefined behaivor")

#-----------------------------------------------------------------------#
executor.start_polling(dp, skip_updates=True)
